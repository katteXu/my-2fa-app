name: "publish"

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: "Git Repository URL (format: owner/repo)"
        default: "katteXu/ntpclient"
        required: false
      branch:
        description: "Target branch name"
        default: "main"
        required: false

env:
  CLONE_DIR: "remote-repo"
  BIN_NAME: "ntpclient"
  TARGET_DIR: "src-tauri/bin"

jobs:
  clone-and-validate:
    runs-on: ubuntu-latest
    outputs:
      repo_path: ${{ env.CLONE_DIR }}
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo_url || 'katteXu/ntpclient' }}
          path: ${{ env.CLONE_DIR }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          fetch-depth: 1

      - name: Validate Rust Project
        run: |
          cd ${{ env.CLONE_DIR }}
          if [ ! -f Cargo.toml ]; then
            echo "::error::Missing Cargo.toml in cloned repository"
            exit 1
          fi
          echo "Cargo.toml content hash: $(sha256sum Cargo.toml | cut -c1-8)"

  cross-platform-build:
    needs: clone-and-validate
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: macos-latest
            target: x86_64-apple-darwin
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: windows-latest
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}
    env:
      BUILD_DIR: ${{ needs.clone-and-validate.outputs.repo_path }}

    steps:
      - name: Setup Environment
        shell: bash
        run: |
          echo "Cloned repository path: ${{ env.BUILD_DIR }}"
          ls -l ${{ env.BUILD_DIR }}

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Cross-Dependencies
        shell: bash
        run: |
          case "${{ matrix.target }}" in
            *linux*)
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu libwebkit2gtk-4.1-dev
              ;;
            *windows*)
              if [[ "${{ matrix.target }}" == *aarch64* ]]; then
                choco install -y visualstudio2022-workload-vctools --params "--add Microsoft.VisualStudio.Component.VC.Tools.ARM64"
              fi
              ;;
          esac

      - name: Build Release
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}

      - name: Process Artifacts
        working-directory: ${{ env.BUILD_DIR }}
        shell: bash
        run: |
          EXT=""
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            EXT=".exe"
          fi

          SRC_PATH="target/${{ matrix.target }}/release/$BIN_NAME$EXT"
          DEST_NAME="$BIN_NAME-${{ matrix.target }}$EXT"

          mkdir -p ${{ env.TARGET_DIR }}
          cp "$SRC_PATH" "${{ env.TARGET_DIR }}/$DEST_NAME"
          echo "Artifact: $DEST_NAME" >> $GITHUB_STEP_SUMMARY

          # Generate checksum
          shasum -a 256 "${{ env.TARGET_DIR }}/$DEST_NAME" > "${{ env.TARGET_DIR }}/$DEST_NAME.sha256"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.target }}
          path: ${{ env.TARGET_DIR }}/*

  publish-tauri:
    needs: cross-platform-build
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.
      - name: install bun
        run: yarn add bun -g
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
