name: "with ntpclient release"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  cross-platform-build:
    # 配置矩阵平台
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            ext: ""
          - platform: macos-latest
            target: x86_64-apple-darwin
            ext: ""
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            ext: ""
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            ext: ""
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            ext: ".exe"

    runs-on: ${{ matrix.platform }}

    steps:
      # 拉取子仓库
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 配置Rust环境
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}
          override: true

      # 构建应用
      - name: Build binary
        run: |
          cd ntpclient
          cargo build --release --target ${{ matrix.target }}

      # 保存产物
      - name: Rename and move binary
        run: |
          cd ntpclient
          binary_name="ntpclient${{ matrix.ext }}"
          target_binary="ntpclient-${{ matrix.target }}${{ matrix.ext }}"

          cp "target/${{ matrix.target }}/release/$binary_name" "../src-tauri/bin/$target_binary"

      - name: Verify artifactis
        run: |
          ls -lh src-tauri/bin/

  publish-tauri:
    needs: cross-platform-build
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.
      - name: install bun
        run: yarn add bun -g
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
